#==============================================================================
# ** Window_BattleStatus
#------------------------------------------------------------------------------
#  This window displays a party member's status on the battle screen.
#==============================================================================

class Window_BattleStatus < Window_Base_Short
  attr_reader :actor  
  #--------------------------------------------------------------------------
  # * Object Initialization
  #--------------------------------------------------------------------------
  def initialize
    super(644-350, -4, 350, 6*24 + 16)
    refresh
    self.active = false
  end
  #--------------------------------------------------------------------------
  # * Select
  #--------------------------------------------------------------------------
  def select(index)
    self.cursor_rect = Rect.new(-8, -8 + index * 24, self.contents.width - 16, 24)
  end
  #--------------------------------------------------------------------------
  # * Unselect
  #--------------------------------------------------------------------------
  def unselect
    self.cursor_rect.empty
  end  
  #--------------------------------------------------------------------------
  # * Refresh Small
  #--------------------------------------------------------------------------
  def refresh
    y = 4
    #self.height = $game_party.actors.size * 24 + 16
    if self.contents != nil
      self.contents.dispose
    end
    self.contents = Bitmap.new(width, height)
    for actor in $game_party.actors       
      bitmap = RPG::Cache.icon("Element_" + actor.element.to_s)
      self.contents.blt(12, y+4, bitmap, Rect.new(0, 0, 20, 20))
      self.contents.font.color = normal_color
      self.draw_text(36, y, 150, 32, actor.name, 0)
      self.draw_text(205, y, 50, 32, actor.maxhp.to_s, 2)
      self.draw_text(275, y, 60, 32, actor.mp.to_s, 2)
      self.contents.font.color = system_color
      self.draw_text(140, y, 75, 32, "HP", 0)
      self.draw_text(275, y, 75, 32, "MP", 0)
      hpfactor = 100 * actor.hp / actor.maxhp
      self.contents.font.color = hpfactor > 25 ? normal_color : 
                                                   actor.hp == 0 ? Color.new(255, 0, 0) :
                                                   Color.new(255, 255, 0)      
      self.draw_text(140, y, 75, 32, actor.hp.to_s + "/", 2)
      hpcol = hpfactor > 50 ? Color.new(0, 255, 0, 150) : 
                    hpfactor > 25 ?  Color.new(255, 255, 0, 150) :
                                                   Color.new(255, 0, 0, 150)      
      self.contents.fill_rect(258, y+14, 12, 6, Color.new(0, 0, 0, 180))
      self.contents.fill_rect(259, y+15, (hpfactor/10.0).ceil, 5, hpcol)      
      self.contents.font.color = normal_color
      self.draw_text(140, y, 75, 32, "/", 2)
      y += 24
    end
  end
end
