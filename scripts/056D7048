#==============================================================================
# ** Window_ShopBuy
#------------------------------------------------------------------------------
#  This window displays items to buy
#==============================================================================

class Window_ShopBuy < Window_Selectable
  #--------------------------------------------------------------------------
  # * Object Initialization
  #--------------------------------------------------------------------------
  def initialize(goods)
    super(16, 115, 350, 224)
    @shop_goods = goods
    refresh
    self.index = 0
    self.z += 10
  end
  #--------------------------------------------------------------------------
  # * Get Item
  #--------------------------------------------------------------------------
  def item
    return @data[self.index]
  end
  #--------------------------------------------------------------------------
  # * Refresh
  #--------------------------------------------------------------------------
  def refresh
    if self.contents != nil
      self.contents.dispose
      self.contents = nil
    end
    @data = []
    for goods_item in @shop_goods
      case goods_item[0]
      when 0
        item = $data_items[goods_item[1]]
      when 1
        item = $data_weapons[goods_item[1]]
      when 2
        item = $data_armors[goods_item[1]]
      end
      if item != nil
        @data.push(item)
      end
    end
    # If item count is not 0, make a bit map and draw all items
    @item_max = @data.size
    if @item_max > 0
      self.contents = Bitmap.new(width - 32, row_max * @row_height)
      for i in 0...@item_max
        draw_item(i)
      end
    end
  end
  #--------------------------------------------------------------------------
  # * Update
  #--------------------------------------------------------------------------  
  def update
    super
    # Update help text (update_help is defined by the subclasses)
    if self.active and @owned_window != nil
      @owned_window.set(self.item)
    end
    # Update effect windows
    if self.active and @effect_windows != nil
      for w in @effect_windows
        w.item = self.item
      end      
    end
  end
  #--------------------------------------------------------------------------
  # * Draw Item
  #     index : item number
  #--------------------------------------------------------------------------
  def draw_item(index)
    item = @data[index]
    can_buy = item.price <= $game_party.gold
    x = 4
    y = index * @row_height - 4
    rect = Rect.new(x, y+4, self.width - 32, @row_height)
    self.contents.fill_rect(rect, Color.new(0, 0, 0, 0))
    bitmap = RPG::Cache.icon(item.icon_name)
    self.contents.font.color = can_buy ? normal_color : disabled_color
    opacity = can_buy ? 255 : 128
    self.contents.blt(x, y+4, bitmap, Rect.new(0, 0, 24, 24), opacity)
    self.draw_text(x + 28, y, 212, 32, item.name, 0)
    self.draw_text(0, y, self.contents.width-2, 32, item.price.to_s, 2)
  end
  #--------------------------------------------------------------------------
  # * Set Owned Window
  #--------------------------------------------------------------------------
  def owned_window=(owned_window)
    @owned_window = owned_window
  end
  #--------------------------------------------------------------------------
  # * Set Effect Windows
  #--------------------------------------------------------------------------
  def effect_windows=(effect_windows)
    @effect_windows = effect_windows
  end
  #--------------------------------------------------------------------------
  # * Help Text Update
  #--------------------------------------------------------------------------
  def update_help
    @help_window.set_text(self.item == nil ? "" : self.item.description)
  end
end
