 #==============================================================================
# ** RPG::Sprite
#------------------------------------------------------------------------------
#  Custom version of RPG::Sprite
#==============================================================================
module RPG
  class Sprite < ::Sprite
    @@_animations = []
    @@_reference_count = {}
  #--------------------------------------------------------------------------
  # * initialize
  #--------------------------------------------------------------------------
    def initialize(viewport = nil)
      super(viewport)
      @_whiten_duration = 0
      @_appear_duration = 0
      @_escape_duration = 0
      @_collapse_duration = 0
      @_collapse_boss_duration = 0
      @_collapse_endboss_duration = 0
      @_collapse_endboss_phase = 0
      @_damage_duration = 0
      @_animation_duration = 0
      @_blink = false
      @_blink_target = false
      @_move = false
      @_status_sprites = []
      @_warmen_sprite = nil
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def dispose
      dispose_damage
      dispose_animation
      dispose_loop_animation
      @_warmen_sprite.bitmap.dispose if @_warmen_sprite != nil
      for s in @_status_sprites
        if s != nil
          @@_reference_count[s.bitmap] -= 1
          if  @@_reference_count[s.bitmap] == 0
            s.bitmap.dispose
          end
          s.dispose
        end
      end        
      super
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def whiten
      self.blend_type = 0
      self.color.set(255, 255, 255, 128)
      self.opacity = 255
      @_whiten_duration = 16
      @_appear_duration = 0
      @_escape_duration = 0
      @_collapse_duration = 0
      @_collapse_boss_duration = 0
      @_collapse_endboss_duration = 0
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def appear
      self.blend_type = 0
      self.color.set(0, 0, 0, 0)
      self.opacity = 0
      @_appear_duration = 16
      @_whiten_duration = 0
      @_escape_duration = 0
      @_collapse_duration = 0
      @_collapse_boss_duration = 0
      @_collapse_endboss_duration = 0
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def escape
      self.blend_type = 0
      self.color.set(0, 0, 0, 0)
      self.opacity = 255
      @_escape_duration = 32
      @_whiten_duration = 0
      @_appear_duration = 0
      @_collapse_duration = 0
      @_collapse_boss_duration = 0
      @_collapse_endboss_duration = 0
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def collapse
      self.blend_type = 1
      self.color.set(255, 64, 64, 255)
      self.opacity = 255
      @_collapse_duration = 32
      @_collapse_endboss_duration = 0
      @_whiten_duration = 0
      @_appear_duration = 0
      @_escape_duration = 0
      @_collapse_boss_duration = 0
    end    
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
  def collapse_boss
    self.blend_type = 1
    self.color.set(255, 64, 64, 255)
    self.opacity = 255
    @_collapse_duration = 0
    @_whiten_duration = 0
    @_appear_duration = 0
    @_escape_duration = 0
    @_collapse_endboss_duration = 0
    @_collapse_boss_duration = 64
    @old_x = x
    @old_y = y
  end
  #--------------------------------------------------------------------------
  # * Collapse endboss
  #--------------------------------------------------------------------------
  def collapse_endboss
    @_collapse_duration = 0
    @_whiten_duration = 0
    @_appear_duration = 0
    @_escape_duration = 0
    @_collapse_boss_duration = 0
    @_collapse_endboss_duration = 256
    @_collapse_endboss_phase = 1
    @old_x = x
    @old_y = y
    $game_system.bgm_fade(2)
  end
  #--------------------------------------------------------------------------
  # * Move to a target position
  #--------------------------------------------------------------------------
    def move(targx, targy, speed)
      if self.x == targx and self.y == targy
        # Sprite is already at the target position
        return
      end      
      @_move = true
      @_target_x = targx
      @_target_y = targy
      @_real_x = self.x
      @_real_y = self.y
      distx = targx - self.x
      disty = targy - self.y
      distance = Math.sqrt(distx ** 2 + disty ** 2)      
      oldspeed = speed
      if distance > speed
        speed = distance / (distance / speed.to_f).round      
      else
        speed = distance
      end
      @_movespeed_x = speed * distx / distance
      @_movespeed_y = speed * disty / distance
    end    
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def damage(value, critical)
      dispose_damage
      if value.is_a?(Numeric)
        damage_string = value.abs.to_s
      else
        damage_string = value.to_s
      end
      bitmap = Bitmap.new(160, 48)
      bitmap.font.size = 26
      bitmap.font.bold = true
      bitmap.font.color.set(0, 0, 0)
      bitmap.draw_text(-1, 12-1, 160, 36, damage_string, 1)
      bitmap.draw_text(+1, 12-1, 160, 36, damage_string, 1)
      bitmap.draw_text(-1, 12+1, 160, 36, damage_string, 1)
      bitmap.draw_text(+1, 12+1, 160, 36, damage_string, 1)
      if value.is_a?(Numeric) and value < 0
        bitmap.font.color.set(176, 255, 144)
      elsif not value.is_a?(Numeric) and value == "Blink!"
        bitmap.font.color.set(255, 255, 0)
      elsif not 
        bitmap.font.color.set(255, 255, 255)
      end
      bitmap.draw_text(0, 12, 160, 36, damage_string, 1)
      @_damage_sprite = ::Sprite.new#(self.viewport)
      @_damage_sprite.bitmap = bitmap
      @_damage_sprite.ox = 80
      @_damage_sprite.oy = 20
      @_damage_sprite.x = self.x
      @_damage_sprite.y = self.y - self.oy / 2
      @_damage_sprite.z = 9999
      @_damage_duration = 30
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def animation(animation, hit, flip = false, element = nil)      
      dispose_animation
      @_animation = animation      
      @_attack_element = element
      return if @_animation == nil
      @_animation_behind = (@_animation.name[0, 1] == "$")
      @_animation_hit = hit
      @_animation_flip = flip
      @_animation_duration = @_animation.frame_max
      animation_name = @_animation.animation_name
      animation_hue = @_animation.animation_hue
      bitmap = RPG::Cache.animation(animation_name, animation_hue)
      if @@_reference_count.include?(bitmap)
        @@_reference_count[bitmap] += 1
      else
        @@_reference_count[bitmap] = 1
      end
      @_animation_sprites = []
      if @_animation.position != 3 or not @@_animations.include?(animation)
        for i in 0..15
          sprite = ::Sprite.new(self.viewport)
          sprite.bitmap = bitmap
          sprite.visible = false
          sprite.z = self.z + i + 1
          @_animation_sprites.push(sprite)
        end
        unless @@_animations.include?(animation)
          @@_animations.push(animation)
        end
      end
      update_animation
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def loop_animation(animation, flip = false)
      return if animation == @_loop_animation
      dispose_loop_animation
      @_loop_animation = animation
      return if @_loop_animation == nil
      @_loop_animation_index = 0
      @_animation_behind = false
      @_animation_flip = flip
      animation_name = @_loop_animation.animation_name
      animation_hue = @_loop_animation.animation_hue
      bitmap = RPG::Cache.animation(animation_name, animation_hue)
      if @@_reference_count.include?(bitmap)
        @@_reference_count[bitmap] += 1
      else
        @@_reference_count[bitmap] = 1
      end
      @_loop_animation_sprites = []
      for i in 0..15
        sprite = ::Sprite.new(self.viewport)
        sprite.bitmap = bitmap
        sprite.visible = false
        @_loop_animation_sprites.push(sprite)
      end
      update_loop_animation
    end
    def dispose_damage
      if @_damage_sprite != nil
        @_damage_sprite.bitmap.dispose
        @_damage_sprite.dispose
        @_damage_sprite = nil
        @_damage_duration = 0
      end
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def dispose_animation
      if @_animation_sprites != nil
        sprite = @_animation_sprites[0]
        if sprite != nil
          @@_reference_count[sprite.bitmap] -= 1
          if @@_reference_count[sprite.bitmap] == 0
            sprite.bitmap.dispose
          end
        end
        for sprite in @_animation_sprites
          sprite.dispose
        end
        @_animation_sprites = nil
        @_animation = nil
      end
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def dispose_loop_animation
      if @_loop_animation_sprites != nil
        sprite = @_loop_animation_sprites[0]
        if sprite != nil
          @@_reference_count[sprite.bitmap] -= 1
          if @@_reference_count[sprite.bitmap] == 0
            sprite.bitmap.dispose
          end
        end
        for sprite in @_loop_animation_sprites
          sprite.dispose
        end
        @_loop_animation_sprites = nil
        @_loop_animation = nil
      end
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def blink_on
      unless @_blink
        @_blink = true
        @_blink_count = 0
      end
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def blink_off
      if @_blink
        @_blink = false
        self.color.set(0, 0, 0, 0)
      end
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def blink?
      @_blink
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def blink_target_on
      unless @_blink_target
        @_blink_target = true
        @_blink_target_count = 0
      end
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def blink_target_off
      if @_blink_target
        @_blink_target = false
        self.color.set(0, 0, 0, 0)
      end
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def blink_target?
      @_blink_target
    end    
  #--------------------------------------------------------------------------
  # * Show # of men
  #--------------------------------------------------------------------------
  def show_men(men)
    @_warmen_sprite.bitmap.dispose if @_warmen_sprite != nil
    @_warmen_sprite = Sprite.new(self.viewport)
    @_warmen_sprite.x = self.x
    @_warmen_sprite.y = self.y
    @_warmen_sprite.z = self.z
    @_warmen_sprite.bitmap = Bitmap.new(32, 32)
    @_warmen_sprite.ox = 16
    @_warmen_sprite.oy = 64
    @_warmen_sprite.bitmap.font.name = ["Courier New", "Courier"]
    @_warmen_sprite.bitmap.font.size = 14
    @_warmen_sprite.bitmap.font.bold = true
    @_warmen_sprite.bitmap.font.color = Color.new(0, 0, 0, 192)
    @_warmen_sprite.bitmap.draw_text(-1, -1, 32, 32, men.to_s, 2)
    @_warmen_sprite.bitmap.draw_text(1, 1, 32, 32, men.to_s, 2)
    @_warmen_sprite.bitmap.font.color = Color.new(255, 255, 255, 200)
    @_warmen_sprite.bitmap.draw_text(0, 0, 32, 32, men.to_s, 2)  
    @_warmen_sprite.bitmap.draw_text(0, 0, 32, 32, men.to_s, 2)  
  end
  #--------------------------------------------------------------------------
  # * Hide # of men
  #--------------------------------------------------------------------------
  def hide_men
    @_warmen_sprite.bitmap.dispose if @_warmen_sprite != nil
  end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def effect?
      @_whiten_duration > 0 or
      @_appear_duration > 0 or
      @_escape_duration > 0 or
      @_collapse_duration > 0 or
      @_collapse_boss_duration > 0 or
      @_collapse_endboss_phase > 0 or
      #@_damage_duration > 0 or
      @_animation_duration > 0 or
      @_move
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def update
      super
      if @_whiten_duration > 0
        @_whiten_duration -= 1
        self.color.alpha = 128 - (16 - @_whiten_duration) * 10
      end
      if @_appear_duration > 0
        @_appear_duration -= 1
        self.opacity = (16 - @_appear_duration) * 16
      end
      if @_escape_duration > 0
        @_escape_duration -= 1
        self.opacity = 256 - (32 - @_escape_duration) * 10
      end
      if @_collapse_duration > 0
        @_collapse_duration -= 1
        self.opacity = 256 - (32 - @_collapse_duration) * 8
      end
      if @_collapse_boss_duration > 0
        @_collapse_boss_duration -= 1
        self.opacity = 255 - (64 - @_collapse_boss_duration) * 4
        self.x = @old_x + rand(8) - 4
        self.y = @old_y + rand(8) - 4
      end
      if @_collapse_endboss_duration > 0
        @_collapse_endboss_duration -= 1
      end
      if @_collapse_endboss_phase == 1        
        if [40, 50, 80, 150].include?(@_collapse_endboss_duration)
          self.animation($data_animations[437], true, false, 0)          
        end        
        if @_collapse_endboss_duration == 0          
          self.blend_type = 1
          self.color.set(255, 64, 64, 255)
          self.opacity = 255
          @_collapse_endboss_phase = 2
          @_collapse_endboss_duration = 256
          self.animation($data_animations[438], true, false, 0)      
        end
      elsif @_collapse_endboss_phase == 2
        self.opacity = 255 - (256 - @_collapse_endboss_duration) 
        self.x = @old_x + rand(16) - 8
        self.y = @old_y + rand(16) - 8
        if self.opacity == 0
          @_collapse_endboss_phase = 3
          @_collapse_endboss_duration = 60
        end   
      elsif @_collapse_endboss_phase == 3
        @_collapse_endboss_phase = 0
      end      
      if @_damage_duration > 0
        @_damage_duration -= 1
        case @_damage_duration
        when 38..39
          @_damage_sprite.y -= 4
        when 36..37
          @_damage_sprite.y -= 2
        when 34..35
          @_damage_sprite.y += 2
        when 28..33
          @_damage_sprite.y += 4
        end
        @_damage_sprite.opacity = 256 - (12 - @_damage_duration) * 32
        if @_damage_duration == 0
          dispose_damage
        end
      end
      if @_animation != nil and (Graphics.frame_count % 2 == 0)
        @_animation_duration -= 1
        update_animation
      end
      if @_loop_animation != nil and (Graphics.frame_count % 2 == 0)
        update_loop_animation
        @_loop_animation_index += 1
        @_loop_animation_index %= @_loop_animation.frame_max
      end
      if @_blink
        @_blink_count = (@_blink_count + 1) % 32
        if @_blink_count < 16
          alpha = (16 - @_blink_count) * 6
        else
          alpha = (@_blink_count - 16) * 6
        end
        self.color.set(255, 255, 255, alpha)
      end
      if @_blink_target
        #@_blink_target_count = (@_blink_target_count + 2) % 32
        #if @_blink_target_count < 16
#          alpha = (16 - @_blink_target_count) * 6
        #else
#          alpha = (@_blink_target_count - 16) * 6
        #end
        self.color.set(255, 0, 0, 128)#a1)
      end
      if @_warmen_sprite != nil
        @_warmen_sprite.x = self.x
        @_warmen_sprite.y = self.y
        @_warmen_sprite.z = self.z
      end
      if @_move
        if (self.x - @_target_x).abs < (self.x + @_movespeed_x - @_target_x).abs
          self.x = @_target_x
          self.y = @_target_y
          self.z = self.y + 1          
          @_move = false         
        else
          @_real_x += @_movespeed_x
          @_real_y += @_movespeed_y
          self.x = @_real_x.to_i
          self.y = @_real_y.to_i
          self.z = self.y + 1
        end
      end        
      @@_animations.clear
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
  def update_status_sprites(states)
    for i in 0..$data_states.length
      if @_status_sprites[i] != nil and not states.include?(i)
        # remove
        sprite = @_status_sprites[i]
        @@_reference_count[sprite.bitmap] -= 1
        if  @@_reference_count[sprite.bitmap] == 0
          @_status_sprites[i].bitmap.dispose
        end
        @_status_sprites[i].dispose
        @_status_sprites[i] = nil
      elsif states.include?(i) and @_status_sprites[i] == nil
        # add
        sprite = ::Sprite.new(self.viewport)
        bitmap = RPG::Cache.animation("Status/" + i.to_s, 0)
        if @@_reference_count.include?(bitmap)
          @@_reference_count[bitmap] += 1
        else
          @@_reference_count[bitmap] = 1
        end        
        sprite.bitmap = bitmap
        @_status_sprites[i] = (sprite)
      end
    end
    update_status_sprites_position
  end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
  def update_status_sprites_position
    # Re-align sprites
    count = 0
    for s in @_status_sprites
      count += 1 if s != nil
    end
    x = self.x + 15
    y = self.y - 140
    i = 0
    maxcol = 5
    for s in @_status_sprites
      next if s == nil
      s.x = x
      s.y = y
      s.z = self.z + 0.5
      y += 20
      i += 1
      if i >= maxcol
        y = self.y - 140
        x -= 20
        i = 0
      end
    end 
  end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
  def shift_status_sprites_position(x, y)
    for s in @_status_sprites
      next if s == nil
      s.x += x
      s.y += y
    end 
  end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def update_animation
      if @_animation_duration > 0
        frame_index = @_animation.frame_max - @_animation_duration
        cell_data = @_animation.frames[frame_index].cell_data
        position = @_animation.position
        animation_set_sprites(@_animation_sprites, cell_data, position)
        for timing in @_animation.timings
          if timing.frame == frame_index
            animation_process_timing(timing, @_animation_hit)
          end
        end
      else
        dispose_animation
      end
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def update_loop_animation
      frame_index = @_loop_animation_index
      cell_data = @_loop_animation.frames[frame_index].cell_data
      position = @_loop_animation.position
      animation_set_sprites(@_loop_animation_sprites, cell_data, position)
      for timing in @_loop_animation.timings
        if timing.frame == frame_index
          animation_process_timing(timing, true)
        end
      end
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def animation_set_sprites(sprites, cell_data, position)
      for i in 0..15
        sprite = sprites[i]
        pattern = cell_data[i, 0]
        if sprite == nil or pattern == nil or pattern == -1
          sprite.visible = false if sprite != nil
          next
        end
        sprite.visible = true
        sprite.src_rect.set(pattern % 5 * 192, pattern / 5 * 192, 192, 192)
        if position == 3
          if self.viewport != nil
            sprite.x = self.viewport.rect.width / 2
            sprite.y = 240  #self.viewport.rect.height - 160
          else
            sprite.x = 320
            sprite.y = 240 #240
          end
        else
          sprite.x = self.x - self.ox + self.src_rect.width / 2
          sprite.y = self.y - self.oy + self.src_rect.height / 2
          sprite.y -= self.src_rect.height / 4 if position == 0
          #sprite.y += self.src_rect.height / 4 - 32 if position == 2
          sprite.y += self.src_rect.height / 2 - 16 if position == 2
        end
        if @_animation_flip
          sprite.x -= cell_data[i, 1]
        else
          sprite.x += cell_data[i, 1]
        end
        sprite.y += cell_data[i, 2]
        sprite.z = @_animation_behind ? self.z - 1 : self.z + 1 + i #2000
        sprite.ox = 96
        sprite.oy = 96
        sprite.zoom_x = cell_data[i, 3] / 100.0
        sprite.zoom_y = cell_data[i, 3] / 100.0
        sprite.angle = cell_data[i, 4]
        sprite.mirror = (cell_data[i, 5] == 1)
        if @_animation_flip
          sprite.mirror = (not sprite.mirror)
          sprite.angle = (360 - sprite.angle) % 360
        end
        sprite.opacity = cell_data[i, 6] * self.opacity / 255.0
        sprite.blend_type = cell_data[i, 7]
      end
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def animation_process_timing(timing, hit)
      if (timing.condition == 0) or
         (timing.condition == 1 and hit == true) or
         (timing.condition == 2 and hit == false)
        if timing.se.name != ""
          se = timing.se
          Audio.se_play("Audio/SE/" + se.name, se.volume, se.pitch)
        end
        c = timing.flash_color        
        # Hack to automatically decide element attack colour
        if @_attack_element != nil and c.alpha == 254
          case @_attack_element
            when 1
              c = Color.new(0, 255, 255, 255)
            when 2
              c = Color.new(119, 0, 119, 255)
            when 3
              c = Color.new(255, 0, 0, 255)
            when 4
              c = Color.new(255, 255, 255, 255)
            when 5
              c = Color.new(0, 0, 255, 255)
            when 6
              c = Color.new(255, 255, 0, 255)
          end
        end        
        case timing.flash_scope
        when 1
          self.flash(c, timing.flash_duration * 2)
        when 2
          if self.viewport != nil
            self.viewport.flash(c, timing.flash_duration * 2)
          end
        when 3
          self.flash(nil, timing.flash_duration * 2)
        end
      end
    end
  #--------------------------------------------------------------------------
  # * Hide status sprites
  #--------------------------------------------------------------------------
  def hide_status
    for s in @_status_sprites
      if s != nil
        s.visible = false
      end
    end            
  end
  #--------------------------------------------------------------------------
  # * Unhide status sprites
  #--------------------------------------------------------------------------
  def show_status
    for s in @_status_sprites
      if s != nil
        s.visible = true
      end
    end       
  end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def x=(x)
      sx = x - self.x
      if sx != 0
        if @_animation_sprites != nil
          for i in 0..15
            @_animation_sprites[i].x += sx
          end
        end
        if @_loop_animation_sprites != nil
          for i in 0..15
            @_loop_animation_sprites[i].x += sx
          end
        end
      end
      super
    end
  #--------------------------------------------------------------------------
  # * 
  #--------------------------------------------------------------------------
    def y=(y)
      sy = y - self.y
      if sy != 0
        if @_animation_sprites != nil
          for i in 0..15
            @_animation_sprites[i].y += sy
          end
        end
        if @_loop_animation_sprites != nil
          for i in 0..15
            @_loop_animation_sprites[i].y += sy
          end
        end
      end
      super
    end
  end
end
