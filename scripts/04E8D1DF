#==============================================================================
# ** Window_Item
#------------------------------------------------------------------------------
#  This window displays items in possession on the item and battle screens.
#==============================================================================

class Window_Item < Window_Selectable
  #--------------------------------------------------------------------------
  # * Object Initialization
  #--------------------------------------------------------------------------
  def initialize
    super(32, 150, 250, 250)
    @show_plotitems = false
    refresh
    self.index = 0
  end
  #--------------------------------------------------------------------------
  # * Get Item
  #--------------------------------------------------------------------------
  def item
    return @data[self.index]
  end
  #--------------------------------------------------------------------------
  # * Set 'show plot items'
  #--------------------------------------------------------------------------
  def show_plotitems=(v)
    if @show_plotitems != v
      @show_plotitems = v
      self.index = 0
      refresh
    end
  end
  #--------------------------------------------------------------------------
  # * Refresh
  #--------------------------------------------------------------------------
  def refresh
    if self.contents != nil
      self.contents.dispose
      self.contents = nil
    end
    @data = []    
    # Add item
    for i in 1...$data_items.size
      if $game_party.item_number(i) > 0
        item = $data_items[i]
        # Check for plot items
        if (item.element_set.include?(10) == @show_plotitems) 
          @data.push(item)
        end
      end
    end
    if $game_party.flashback_mode
      @data = []
    end
    # If item count is not 0, make a bit map and draw all items
    @item_max = @data.size
    if @item_max > 0
      self.contents = Bitmap.new(width - 32, row_max * @row_height + 32)
      for i in 0...@item_max
        draw_item(i)
      end
    else
      self.contents = Bitmap.new(width - 32, 1 * @row_height + 32)
      @item_max = 1
    end    
  end
  #--------------------------------------------------------------------------
  # * Draw Item
  #     index : item number
  #--------------------------------------------------------------------------
  def draw_item(index)
    item = @data[index]
    case item
    when RPG::Item
      number = $game_party.item_number(item.id)
    when RPG::Armor
      number = $game_party.armor_number(item.id)
    end
    if item.is_a?(RPG::Item) and
       $game_party.item_can_use?(item.id)
      self.contents.font.color = normal_color
    else
      self.contents.font.color = disabled_color
    end
    x = 4
    y = index * @row_height - 4
    rect = Rect.new(x, y+4, self.width - 32, @row_height)
    self.contents.fill_rect(rect, Color.new(0, 0, 0, 0))
    bitmap = RPG::Cache.icon(item.icon_name)
    opacity = self.contents.font.color == normal_color ? 255 : 128
    self.contents.blt(x, y+4, bitmap, Rect.new(0, 0, 24, 24), opacity)
    self.draw_text(x + 28, y, 212, 32, item.name, 0)
    self.draw_text(0, y, self.contents.width, 32, number.to_s, 2)
  end
  #--------------------------------------------------------------------------
  # * Help Text Update
  #--------------------------------------------------------------------------
  def update_help
    @help_window.set_text(self.item == nil ? "" : self.item.description)
  end
end
