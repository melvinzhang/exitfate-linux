#==============================================================================
# ** Window_EquipItem
#------------------------------------------------------------------------------
#  This window displays choices when opting to change equipment on the
#  equipment screen.
#==============================================================================

class Window_EquipItem < Window_Selectable
  #--------------------------------------------------------------------------
  # * Object Initialization
  #     actor      : actor
  #     equip_type : equip type (0-4)
  #--------------------------------------------------------------------------
  def initialize(equip_type)
    super(165, 228, 300, 480-48-228)
    @equip_type = equip_type
    refresh
    self.active = false
    self.visible = false
    self.index = -1
  end
  #--------------------------------------------------------------------------
  # * Item Acquisition
  #--------------------------------------------------------------------------
  def item
    return @data[self.index]
  end
  #--------------------------------------------------------------------------
  # * Refresh
  #--------------------------------------------------------------------------
  def refresh(actor = nil)
    if self.contents != nil
      self.contents.dispose
      self.contents = nil
    end
    @data = []
    # Maps the data_armor kind to the standard order
    kind_map = [2, 0, 1, 3]    
    # Armour
    if @equip_type != 4
      for i in (1..$data_armors.size).to_a.reverse
        if $game_party.armor_number(i) > 0
          if kind_map[$data_armors[i].kind] == @equip_type     
            if actor == nil or actor.equippable?($data_armors[i])
              @data.push($data_armors[i])
            end
          end
        end
      end
    end
    # Items
    if @equip_type == 4
      for i in (1...$data_items.size).to_a.reverse
        if $game_party.item_number(i) > 0
          item = $data_items[i]
          # Check for plot items
          if not item.element_set.include?(10)
            @data.push(item)
          end
        end
      end
    end
    @data.push(nil)
    # Make a bit map and draw all items
    @item_max = @data.size
    self.contents = Bitmap.new(width - 32, [row_max * @row_height,24].max)
    for i in 0...@item_max - 1
      draw_item(i)
    end
  end
  #--------------------------------------------------------------------------
  # * Draw Item
  #     index : item number
  #--------------------------------------------------------------------------
  def draw_item(index)
    item = @data[index]
    x = 4
    y = index * @row_height - 4
    case item
    when RPG::Armor
      number = $game_party.armor_number(item.id)
    when RPG::Item
      number = $game_party.item_number(item.id)
    end
    bitmap = RPG::Cache.icon(item.icon_name)
    self.contents.blt(x, y + 4, bitmap, Rect.new(0, 0, 24, 24))
    self.contents.font.color = normal_color
    self.draw_text(x + 28, y, 212, 32, item.name, 0)
    self.draw_text(self.contents.width-24, y, 24, 32, number.to_s, 2)
  end
  #--------------------------------------------------------------------------
  # * Help Text Update
  #--------------------------------------------------------------------------
  def update_help
    @help_window.set_text(self.item == nil ? "" : self.item.description)
  end
end
