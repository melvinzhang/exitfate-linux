#==============================================================================
# ** Scene_Shop
#------------------------------------------------------------------------------
#  This class performs item screen processing.
#==============================================================================

class Scene_Shop
  #--------------------------------------------------------------------------
  # * Initialize
  #    type = 0 for regular stores, 1 for Bartolli acc-only, 2 for Bartolli, 3 for Nikolai, 4 for Mai
  #--------------------------------------------------------------------------
  def initialize(type = 0)
    case type
      when 0
        # Re-order goods
        list = $game_temp.shop_goods.reverse!
      when 1
        list = $game_party.accessories_seen.sort   
      when 2
        list = $game_party.items_seen.sort.reverse + $game_party.accessories_seen.sort   
      when 3
        list = $game_party.armor_seen.sort.reverse        
      when 4
        list = $game_party.magic_seen.sort.reverse    
      end
    # Process items
    @store_ismagic = false
    magic = []
    armors = []
    helmets = []
    boots = []
    accs = []
    items = []
    for g in list
      if g[0] == 1
         magic.push(g)
         $game_party.seen_in_store(1, g[1])
        @store_ismagic = true
      elsif g[0] == 0
         items.push(g)
         $game_party.seen_in_store(0, g[1])
      else
        item = $data_armors[g[1]]
        if item.kind == 0
          boots.push(g)
          $game_party.seen_in_store(2, g[1])
        elsif item.kind == 1
          helmets.push(g)
          $game_party.seen_in_store(2, g[1])
        elsif item.kind == 2
          armors.push(g)
          $game_party.seen_in_store(2, g[1])
        else
          accs.push(g)
          $game_party.seen_in_store(3, g[1])
        end
      end      
    end
     $game_temp.shop_goods = magic + armors + helmets + boots + accs + items.reverse
  end
  #--------------------------------------------------------------------------
  # * Main Processing
  #--------------------------------------------------------------------------
  def main        
    # Make title graphic
    @sprite = Sprite.new
    @sprite.bitmap = RPG::Cache.picture("Backgrounds/Menu" + $game_system.windowskin_id.to_s)    
    # Make label window
    @label_window = Window_Label.new("Store")
    # Make command window
    s = []
    s.push("Buy")
    #s.push("Equip")
    s.push("Sell")
    @command_window = Window_Command.new(150, s)
    @command_window.y = 115
    @command_window.windowskin_suffix = "_left"
    @command_window.index = 0
    @command_window.active = true    
    # Make status window
    @status_window = []
    @effect_window = [] 
    for i in 0...6
      @status_window[i] = Window_MenuStatus.new($game_party.actors[i], true, true)
      @status_window[i].x = 465
      @status_window[i].y = i*36
      @effect_window[i] = Window_ShopEffect.new($game_party.actors[i])
      @effect_window[i].y = i*36
    end
    @entourage_window = Window_Base_Short.new(465, 6*36, 300, 40)
    @entourage_window.contents = Bitmap.new(175, 48)      
    @entourage_window.windowskin_suffix = "_right"
    @entourage_window.contents.font.color = @entourage_window.system_color
    @entourage_window.draw_text(24, 4, 200, 32, "Entourage")
    for i in 0...2
      @status_window[6+i] = Window_MenuStatus.new($game_party.entourage[i], true, true)
      @status_window[6+i].x = 465
      @status_window[6+i].y = (i+7)*36
      @effect_window[6+i] = Window_ShopEffect.new($game_party.entourage[i])      
      @effect_window[6+i].y = (i+7)*36
    end
    # Make help window, item window    
    @help_window = Window_Help.new
    @owned_window = Window_ShopOwned.new
    @buy_window = Window_ShopBuy.new($game_temp.shop_goods)
    @buy_window.visible = false
    @buy_window.active = false
    @sell_window = Window_ShopSell.new
    @sell_window.visible = false
    @sell_window.active = false
    if @sell_window.list_empty?
      @command_window.disable_item(1)
    end
    # Make quantity input window
    @number_window = Window_ShopNumber.new
    @number_window.active = false
    @number_window.visible = false
    # Gold window
    @gold_window = Window_Gold.new
    @gold_window.windowskin_suffix = "_left"
    @gold_window.x = -4
    @gold_window.y = 56
    # Associate help window
    @buy_window.help_window = @help_window
    @sell_window.help_window = @help_window
    @buy_window.owned_window = @owned_window
    @sell_window.owned_window = @owned_window
    @buy_window.effect_windows = @effect_window
    # Execute transition
    Graphics.transition
    # Main loop
    loop do
      # Update game screen
      Graphics.update
      # Update input information
      Input.update
      # Frame update
      update
      # Abort loop if screen is changed
      if $scene != self
        break
      end
    end
    # Prepare for transition
    Graphics.freeze
    # Dispose of windows
    for w in @status_window + @effect_window
      w.dispose
    end
    @buy_window.dispose 
    @sell_window.dispose
    @help_window.dispose
    @number_window.dispose
    @owned_window.dispose
    @command_window.dispose
    @label_window.dispose
    @sprite.bitmap.dispose
    @sprite.dispose
    @entourage_window.dispose
    @gold_window.dispose
  end
  #--------------------------------------------------------------------------
  # * Frame Update
  #--------------------------------------------------------------------------
  def update
    # Update windows
    @help_window.update
    @buy_window.update
    @sell_window.update
    @number_window.update
    @command_window.update
    for w in @status_window + @effect_window
      w.update
    end        
    if @command_window.active
      update_command
      return
    end   
    if @buy_window.active
      update_buy
      return
    end
    if @sell_window.active
      update_sell
      return
    end
    if @number_window.active
      update_number
      return
    end
    # If nothing else is active, then we are targetting
    update_target
  end
  #--------------------------------------------------------------------------
  # * Frame Update (when Command window is active)
  #--------------------------------------------------------------------------
  def update_command
    case @command_window.index
      when 0
        @help_window.set_text("Buy items")
      #when 1
#        @help_window.set_text("Buy items and immediately equip them")
      when 1
        @help_window.set_text("Sell items")
    end
    # If B button was pressed
    if Input.trigger?(Input::B)
      $game_system.se_play($data_system.cancel_se)
      $scene = Scene_Map.new
      return
    end
    # If C button was pressed, switch to item list
    if Input.trigger?(Input::C)
      $game_system.se_play($data_system.decision_se)
      if @command_window.index == 1
        if @sell_window.list_empty?
          $game_system.se_play($data_system.buzzer_se)          
          return
        end
        @sell_window.visible = true
        @sell_window.active = true
      else
        @buy_window.refresh
        @buy_window.visible = true
        @buy_window.active = true
        for w in @effect_window
          w.refresh
        end
      end
      @owned_window.visible = true
      @command_window.active = false      
    end
  end
  #--------------------------------------------------------------------------
  # * Frame Update (when buy window is active)
  #--------------------------------------------------------------------------
  def update_buy
    # If B button was pressed
    if Input.trigger?(Input::B)
      $game_system.se_play($data_system.cancel_se)
      @buy_window.visible = false
      @buy_window.active = false
      @owned_window.visible = false
      @command_window.active = true
      for w in @effect_window
        w.visible = false
      end
      return
    end
    # If C button was pressed
    if Input.trigger?(Input::C)
      # Get currently selected data on the item window
      @item = @buy_window.item      
      # Get items in possession count
      case @item
      when RPG::Item
        number = $game_party.item_number(@item.id)
      when RPG::Weapon
        number = $game_party.magic_number(@item.id)
      when RPG::Armor
        number = $game_party.armor_number(@item.id)
      when nil
        $game_system.se_play($data_system.buzzer_se)
        return
      end
      # If 99 items are already in possession
      if number == 99
        # Play buzzer SE
        $game_system.se_play($data_system.buzzer_se)
        return
      end
      # Calculate maximum amount possible to buy
      max = @item.price == 0 ? 99 : $game_party.gold / @item.price
      max = [max, 99 - number].min
      if max > 0
        # Change windows to quantity input mode
        @buy_window.active = false
        @number_window.set(@item, max, @item.price)
        @number_window.active = true
        @number_window.visible = true
      else
        $game_system.se_play($data_system.buzzer_se)
      end
    end
  end
  #--------------------------------------------------------------------------
  # * Frame Update (when sell window is active)
  #--------------------------------------------------------------------------
  def update_sell
    # If B button was pressed
    if Input.trigger?(Input::B)
      $game_system.se_play($data_system.cancel_se)
      @command_window.refresh
      if @sell_window.list_empty?
        @command_window.disable_item(1)
      end      
      @sell_window.visible = false
      @sell_window.active = false
      @owned_window.visible = false
      @command_window.active = true
      return
    end
    # If C button was pressed
    if Input.trigger?(Input::C)
      # Get currently selected data on the item window
      @item = @sell_window.item
      if @item.price < 2
        $game_system.se_play($data_system.buzzer_se)
        return
      end     
      unless @item == nil
        case @item
        when RPG::Item
          number = $game_party.item_number(@item.id)
        when RPG::Armor
          number = $game_party.armor_number(@item.id)
        end
        @number_window.set(@item, number, @item.price / 2)
        @number_window.active = true
        @number_window.visible = true
        @sell_window.active = false
      end
    end
  end
  #--------------------------------------------------------------------------
  # * Frame Update (when quantity input window is active)
  #--------------------------------------------------------------------------
  def update_number
    # If B button was pressed
    if Input.trigger?(Input::B)
      $game_system.se_play($data_system.cancel_se)
      @number_window.active = false
      @number_window.visible = false
      # Branch by command window cursor position
      case @command_window.index
      when 0 # Buy
        @buy_window.active = true
        @buy_window.visible = true
      when 1  # sell
        @sell_window.active = true
        @sell_window.visible = true
      end
      return
    end
    # If C button was pressed
    if Input.trigger?(Input::C)
      $game_system.se_play($data_system.shop_se)
      @number_window.active = false
      @number_window.visible = false
      # Branch by command window cursor position
      case @command_window.index
      when 0  # buy
        $game_party.lose_gold(@number_window.number * @item.price)
        case @item
        when RPG::Item
          $game_party.gain_item(@item.id, @number_window.number)
        when RPG::Weapon
          $game_party.gain_magic(@item.id, @number_window.number)
        when RPG::Armor
          $game_party.gain_armor(@item.id, @number_window.number)
        end
        # Refresh each window
        @gold_window.refresh
        @buy_window.refresh
        @owned_window.refresh
        # Change windows to buy mode
        @buy_window.active = true
        @buy_window.visible = true
      when 1  # sell
        $game_party.gain_gold(@number_window.number * (@item.price / 2))
        case @item
        when RPG::Item
          $game_party.lose_item(@item.id, @number_window.number)
        when RPG::Armor
          $game_party.lose_armor(@item.id, @number_window.number)
        end        
        # Refresh each window
        @gold_window.refresh
        @sell_window.refresh
        @owned_window.refresh
        # Change windows to sell mode
        @sell_window.active = true
        @sell_window.visible = true
        if @sell_window.list_empty?          
          @command_window.refresh
          @command_window.disable_item(1)
          @sell_window.visible = false
          @sell_window.active = false
          @owned_window.visible = false
          @command_window.active = true
          return     
        end
      end
      return
    end
  end
  #--------------------------------------------------------------------------
  # * Frame Update (when target window is active)
  #--------------------------------------------------------------------------
  def update_target
    if Input.repeat?(Input::DOWN)
      if @target_index > -1
        $game_system.se_play($data_system.cursor_se)       
        @status_window[@target_index].active = false
        @status_window[@target_index].unselect
        @target_index = (@target_index + 1) % 8
        @status_window[@target_index].active = true
        @status_window[@target_index].select        
      end      
    end    
    if Input.repeat?(Input::UP)
      if @target_index > -1
        $game_system.se_play($data_system.cursor_se)       
        @status_window[@target_index].active = false
        @status_window[@target_index].unselect        
        @target_index = (@target_index - 1 + 8) % 8
        @status_window[@target_index].active = true
        @status_window[@target_index].select        
      end      
    end        
    # If B button was pressed
    if Input.trigger?(Input::B)
      # Play cancel SE
      $game_system.se_play($data_system.cancel_se)
      # If unable to use because items ran out
      unless $game_party.item_can_use?(@item.id)
        # Remake item window contents
        @buy_window.refresh
      end
      for w in @status_window
        w.unselect
        w.active = false
      end
      @buy_window.active = true      
      return
    end
    # If C button was pressed
    if Input.trigger?(Input::C)
    end   
  end
end
