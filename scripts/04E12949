#==============================================================================
# ** Window_Experience
#------------------------------------------------------------------------------
#  This window displays a party member's experience gains
#==============================================================================

class Window_Experience < Window_Base_Short
  attr_reader :actor  
  attr_reader :leveled_up
  #--------------------------------------------------------------------------
  # * Object Initialization
  #--------------------------------------------------------------------------
  def initialize(actor, enemy_levels, ishealed)
    super(300, 0, 390, 80)
    self.contents = Bitmap.new(width, height)
    self.windowskin_suffix = "_right"
    self.visible = false
    @actor = actor
    @finished = false
    @leveled_up = false
    @ishealed = ishealed
    setup(enemy_levels)
    refresh
  end
  #--------------------------------------------------------------------------
  # * Setup
  #--------------------------------------------------------------------------
  def setup(enemy_levels)
    # Calculate what the actor's final level and exp will be
    ### Exp = 1000 * (3^X / 2^X) / Battles_per_level)
    ### Where X = (ELVL - PLVL)    
    @final_level = @actor.level
    @final_exp = @actor.exp
    for e_level in enemy_levels
      percentage_left = 100
      # Loop until no more levels are gained
      while true
        x = e_level - @final_level
        exp = 1000 * (3 ** x / 2 ** x) / 20
        exp = exp * percentage_left / 100        
        exp = exp.to_i        
        if exp < 2 and percentage_left == 100
          # Base amount of exp
          exp = 2
        end
        # If we no longer have enough left to gain a level
        if exp < 1000 - @final_exp
          @final_exp += exp
          break
        else
          # Gain a level
          @final_level += 1        
          percentage_left = percentage_left * (100 - (1000 - @final_exp) * 100 / exp) / 100
          @final_exp = 0
        end      
      end
    end    
    # Determine speed
    @speed = [5+10 * (@final_level - @actor.level), 50].min
    @wait = 15
  end
  #--------------------------------------------------------------------------
  # * Update
  #--------------------------------------------------------------------------
  def update
    super
    @leveled_up = false
    # Don't update if not visible
    return if not self.visible
    return if @finished
    # Wait
    if @wait > 0
      @wait -= 1
      return
    end
    # Add some exp
    @actor.exp += @speed
    if @actor.exp >= 1000
      oldmaxhp = @actor.maxhp
      @actor.level += 1
      @actor.hp = @actor.hp * @actor.maxhp / oldmaxhp
      @actor.exp -= 1000
      @gained_level = true
      @leveled_up = true
    end
    # Check if finished
    if @actor.level >= @final_level and @actor.exp >= @final_exp
      @actor.level  = @final_level
      @actor.exp = @final_exp
      @finished = true
    end   
    @wait = 1
    refresh    
  end
  #--------------------------------------------------------------------------
  # * Is finished?
  #--------------------------------------------------------------------------
  def finished?
    return @finished
  end
  #--------------------------------------------------------------------------
  # * Is finished?
  #--------------------------------------------------------------------------
  def stop
    if @actor.level < @final_level
      @gained_level = true
    end      
    oldmaxhp = @actor.maxhp    
    @actor.level  = @final_level
    @actor.exp = @final_exp
    @actor.hp = @actor.hp * @actor.maxhp / oldmaxhp
    @finished = true    
    refresh
  end
  #--------------------------------------------------------------------------
  # * Refresh
  #--------------------------------------------------------------------------
  def refresh
    self.contents.clear
    draw_actor_menu_portrait(@actor, 8, 8)
    bitmap = RPG::Cache.icon("Element_" + @actor.element.to_s)
    self.contents.blt(150, 8, bitmap, Rect.new(0, 0, 20, 20))
    self.contents.font.color = normal_color
    self.draw_text(175, 4, 150, 32, @actor.name, 0)
    self.draw_text(250, 25, 75, 32, @actor.exp.to_s, 2)
    self.draw_text(200, 24, 32, 32, @actor.level.to_s, 2)
    self.draw_text(215, 44, 50, 32, actor.maxhp.to_s, 2)
    self.contents.font.color = system_color
    self.draw_text(250, 24, 75, 32, "Exp", 0)
    self.draw_text(150, 24, 75, 32, "Level", 0)
    self.draw_text(150, 44, 75, 32, "HP", 0)
    if @gained_level
      self.contents.font.color = normal_color      
    self.draw_text(16, 44, 200, 32, "LEVEL UP!", 0)
  end
  self.contents.font.color = @ishealed ? Color.new(0, 255, 255) : normal_color
  self.draw_text(150, 44, 75, 32, actor.hp.to_s + "/", 2)
  self.contents.font.color = normal_color
  self.draw_text(150, 44, 75, 32, "/", 2)
  end
end
